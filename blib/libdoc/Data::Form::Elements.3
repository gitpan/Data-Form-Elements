.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::Form::Elements 3"
.TH Data::Form::Elements 3 "2004-07-06" "perl v5.8.2" "User Contributed Perl Documentation"
.SH "Data::Form::Elements"
.IX Header "Data::Form::Elements"
Data::Form::Elements \- a wrapper \s-1API\s0 for Data::FormValidator and a module for
providing elemental access to the fields of a form, from a generic
perspective.  The form in question does not need to be an \s-1HTML\s0 form.
Basically, if Data::FormValidator can use it as a form, so can we.
.SH "Version"
.IX Header "Version"
Version 0.01
.SH "Synopsis"
.IX Header "Synopsis"
A quick example of using this module for a login form:
.PP
.Vb 1
\&    use Data::Form::Elements;
.Ve
.PP
.Vb 1
\&    my $form = Data::Form::Elements->new();
.Ve
.PP
.Vb 5
\&    # add a couple elements
\&    $form->add_element( "username", { 
\&        required => 1, errmsg => "Please provide your username." } );
\&    $form->add_element( "password", { 
\&        required => 1, errmsg => "Please provide your password." } );
.Ve
.PP
.Vb 1
\&    ...
.Ve
.PP
.Vb 1
\&    $form->validate( %ARGS );
.Ve
.PP
.Vb 3
\&    if ( $form->is_valid() ) {
\&        # continue logging on ...
\&    }
.Ve
.SH "Functions"
.IX Header "Functions"
.Sh "\fInew()\fP"
.IX Subsection "new()"
Simple constructor.
.Sh "\fIadd_element()\fP"
.IX Subsection "add_element()"
Add an element to the form object.
A full form element looks like this
.PP
.Vb 7
\&    $form->add_element( "sort_position" , { 
\&        required => 0,
\&        valid  => 0,
\&        value => '',
\&        errmsg => 'Please choose where this section will show up on the list.',
\&        constratints => qr/^\ed+$/,
\&        invmsg => 'Only numbers are allowed for this field.  Please use the dropdown to select the position for this section.' });
.Ve
.PP
By default, only the name (key) is required.  the required element will
default to 0 if it is not specified.  If required is set to 1 and the
errmsg has not been initialized, it will also be set to a default.
.Sh "\fIparams()\fP"
.IX Subsection "params()"
Returns a list of the elements in this form.
.Sh "\fIdump_form()\fP"
.IX Subsection "dump_form()"
use Data::Dumper to help debug a form.
.Sh "\fIdump_validator()\fP"
.IX Subsection "dump_validator()"
use Data::Dumper to help debug a form's underlying Data::FormValidator.
.Sh "\fIvalidate()\fP"
.IX Subsection "validate()"
Takes a hash of values for the form elements and validates them against the
rules you have set up.
.PP
Example:
    \f(CW$form\fR\->validate( \f(CW%ARGS\fR );
    if ( \f(CW$form\fR\->\fIis_valid()\fR ) {
        # continue processing form...
    }
.Sh "\fIis_valid()\fP"
.IX Subsection "is_valid()"
Returns true/false.
.Sh "\fIparam()\fP"
.IX Subsection "param()"
Getter/Setter methods for setting an individual form element.
.PP
Example:
    # getter
    print \f(CW$form\fR\->param(\*(L"username\*(R");
.PP
.Vb 2
\&    # setter
\&    $form->param("username", "jason");
.Ve
.PP
\&\s-1TODO:\s0  make accessors like Class::DBI so you will be able to do 
    \f(CW$form\fR\->\fIusername()\fR;
or
    \f(CW$form\fR\->username(\*(L"jason\*(R");
.Sh "\fImessage()\fP"
.IX Subsection "message()"
returns the error or invalid message for a form element, if there is one.
Returns undef if no message exists.
.SH "Author"
.IX Header "Author"
jason gessner, \f(CW\*(C`<jason@multiply.o>\*(C'\fR
.SH "Bugs"
.IX Header "Bugs"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-testing@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.  I will be notified, and then you'll automatically
be notified of progress on your bug as I make changes.
.SH "Copyright & License"
.IX Header "Copyright & License"
Copyright 2004 me, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
